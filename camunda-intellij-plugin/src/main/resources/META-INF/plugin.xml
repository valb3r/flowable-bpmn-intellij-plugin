<!-- `url` specifies the URL of the plugin homepage (can be opened from "Plugins" settings dialog) -->
<idea-plugin url="https://github.com/valb3r/flowable-bpmn-intellij-plugin">
    <!-- Plugin name -->
    <name>Camunda BPMN visualizer</name>

    <!-- Plugin version -->
    <version>0.5.2</version>

    <!-- Unique identifier of the plugin. Cannot be changed between the plugin versions.
         If not specified, assumed to be equal to <name>. -->
    <id>camunda-bpmn-visualizer</id>

    <!-- Description of the plugin. -->
    <description><![CDATA[
      <p>The plugin to bring BPMN (Camunda) world closer to developer needs. It supports editing and visualizing Camunda BPMN
      diagrams with navigation and process debugging support. Provides necessary glue to jump between code and BPMN diagram
      and bridges IntelliJ refactorings (changing bean names for example) to XML diagrams.</p>
      <p><b>Please check <a href="https://github.com/valb3r/flowable-bpmn-intellij-plugin">plugin repository</a> for how-to videos</b></p>
      <p><strong>Key features</strong></p>
      <ul>
        <li>BPMN editing/viewing</li>
        <li>Jumping from delegate expression or class directly to code</li>
        <li>Language injections to underlying XML file, so that class usage and refactoring is available</li>
        <li>BPMN process debugging</li>
      </ul>
      <br/>
      <p><a href="https://github.com/valb3r/flowable-bpmn-intellij-plugin">Github</a> stars are welcome!</p>
      <br/>
      <p><strong>Keyboard shortcuts</strong></p>
      <ul>
        <li>Undo/Redo Ctrl-Z/Ctrl-Y</li>
        <li>Zoom in/out Ctrl +/-</li>
        <li>Arrow pane navigation, (Ctrl for larger step)</li>
        <li>Copy/Paste Ctrl-C/Ctrl-V/Ctrl-X</li>
      </ul>
      <p><strong>Plugin status: Work in progress. Please use issue tracker to report any problems found</strong></p>
    ]]></description>

    <!-- Description of changes in the latest version of the plugin. Displayed in the "Plugins" settings dialog and
         in the plugin repository Web interface. -->
    <change-notes><![CDATA[
       <p>0.5.2:</p>
        <ul>
          <li>
            Sometimes dragged element selected wrong drag target
          </li>
          <li>
            Boundary event attachedTo property was not changed in UI when dragging the element unless user
            manually de-selected element
          </li>
          <li>
            Setting to disable XSD injection (suppress XML validation by IJ)
          </li>
          <li>
            Stop using scheduled for removal IJ internal API
          </li>
        </ul>
      <p>0.5.1:</p>
        <ul>
          <li>
            Fix for changing settings in IntelliJ 2023.1+
          </li>
        </ul>
      <p>0.5.0:</p>
        <ul>
          <li>
            Support for inplace element type change
          </li>
          <li>
            Support for element listeners (basic)
          </li>
          <li>
            Support for send event task
          </li>
        </ul>
    ]]></change-notes>

    <!-- The vendor of the plugin. The optional "url" attribute specifies the URL of the vendor homepage.
         The optional "email" attribute specifies the e-mail address of the vendor.-->
    <vendor url="https://github.com/valb3r/flowable-bpmn-intellij-plugin" email="vbe@golden-dimension.com">Valentyn Berezin</vendor>

    <!-- The unique identifiers of the plugins on which this plugin depends. -->
    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.database</depends>

    <!-- Optional dependency on another plugin. If the plugin with the "com.MySecondPlugin" ID is installed,
         the contents of mysecondplugin.xml (the format of this file conforms to the format of plugin.xml)
         will be loaded. -->
    <!-- <depends optional="true" config-file="mysecondplugin.xml">com.MySecondPlugin</depends> -->

    <!-- Allows a plugin to integrate its help system (in JavaHelp format) with the IDE help system.
         The "file" attribute specifies the name of the JAR file in the "help" subdirectory of the plugin directory.
         The "path" attribute specifies the name of the helpset file within the JAR file.-->
    <!-- <helpset file="myhelp.jar" path="/Help.hs" /> -->

    <!-- Minimum and maximum build of IDE compatible with the plugin -->
    <idea-version since-build="213"/>

    <!-- Resource bundle (/messages/MyPluginBundle.properties) to be used with `key` attributes in extension points
         and implicit keys like `action.[pluginID].[ActionID].text` -->
    <!-- <resource-bundle xmlns="">messages.MyPluginBundle</resource-bundle> -->

    <!-- Plugin's application components (with component's interface and implementation class) -->
    <!--<application-components>
        <interface-class>com.foo.Component1Interface</interface-class>
        <implementation-class>com.foo.impl.Component1Impl</implementation-class>
    </application-components> -->

    <!-- Plugin's project components -->
    <!-- <project-components> -->
        <!-- <component> -->
            <!-- Interface and implementation classes are the same -->
            <!-- <implementation-class>com.foo.Component2</implementation-class> -->

            <!-- If the "workspace" option is set "true", the component
                 saves its state to the .iws file instead of the .ipr file.
                 Note that the <option> element is used only if the component
                 implements the JDOMExternalizable interface. Otherwise, the
                 use of the <option> element takes no effect.  -->
            <!-- <option name="workspace" value="true" /> -->

            <!-- If the "loadForDefaultProject" tag is present, the project component is instantiated also
                 for the default project. -->
            <!-- <loadForDefaultProject/> -->
        <!-- </component> -->
    <!-- </project-components> -->

    <!-- Plugin's module components -->
    <!-- <module-components>
        <component>
            <implementation-class>com.foo.Component3</implementation-class>
        </component>
    </module-components> -->

    <!-- Actions -->
    <actions>
        <!-- The <group> element defines an action group.
             <action>, <group> and <separator> elements defined within it are automatically included in the group.
             - "id" (required) specifies an unique identifier for the action.
             - "class" (optional) specifies the full-qualified name of the class implementing the group.
               If not specified, com.intellij.openapi.actionSystem.DefaultActionGroup is used.
             - "text" (optional) specifies the text of the group (text for the menu item showing the submenu).
             - "description" (optional) specifies the text displayed in the status bar when the group is focused.
             - "icon" (optional) specifies the icon which is displayed on the toolbar button or next to the group.
             - "popup" (optional) specifies how the group is presented in the menu. If a group has popup="true",
               actions in it are placed in a submenu; for popup="false", actions are displayed as a section of
               the same menu delimited by separators. -->

        <!-- Allow to create new Camunda BPMN 2.0 diagram -->
        <action
                id="BpmnDiagram.NewCamundaBpmnAction"
                icon="/icons/icon.png"
                class="com.valb3r.bpmn.intellij.plugin.camunda.actions.NewCamundaBpmnAction">
            <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewFile"/>
        </action>

        <group id="BpmnCamundaDiagramActionGroup"
               text="Camunda BPMN Diagram"
               description="Actions of Camunda BPMN diagram plugin"
               icon="/icons/icon.png"
               popup="false">
            <!-- The <action> element defines an action to register.
                 - "id" (required) specifies an unique identifier for the action.
                 - "class" (required) specifies the full-qualified name of the class implementing the action.
                 - "text" (required) specifies the text (tooltip for toolbar button or text for menu item).
                 - "use-shortcut-of" (optional) specifies the ID of the action whose keyboard shortcut this action uses.
                 - "description" (optional) specifies the text displayed in the status bar when the action is focused.
                 - "icon" (optional) specifies the icon displayed on the toolbar button or next to the menu item. -->
            <action id="BpmnDiagram.ViewCamundaBpmnDiagram"
                    class="com.valb3r.bpmn.intellij.plugin.camunda.actions.ViewCamundaBpmnDiagramAction"
                    text="View BPMN (Camunda) Diagram"
                    description="View BPMN (Camunda) Diagram"
                    icon="/icons/icon.png">
            </action>
            <!-- The <add-to-group> node specifies that the action should be added to an existing group.
                 An action can be added to several groups.
                 - "group-id" (required) specifies the ID of the group to which the action is added. The group must be
                   implemented by an instance of the DefaultActionGroup class.
                 - "anchor" (required) specifies the position of the action in the group relative to other actions.
                   It can have the values "first", "last", "before" and "after".
                 - "relative-to-action" (required if the anchor is set to "before" and "after") specifies the action
                   before or after which the current action is inserted. -->
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
            <!-- The <separator> element defines a separator between actions. -->
            <!-- <separator/> -->
            <!-- <group id="AnotherNestedGroup"/> -->
            <!-- The <reference> element allows to add an existing action to the group.
                 - "ref" (required) specifies the ID of the action to add. -->
            <!-- <reference ref="EditorCopy"/> -->
        </group>
        <group id="BpmnCamundaAttachToDataSource"
               text="Attach To Schema"
               description="Attach to database schema to investigate process"
               icon="/icons/icon.png"
               popup="false">
            <!-- The <action> element defines an action to register.
                 - "id" (required) specifies an unique identifier for the action.
                 - "class" (required) specifies the full-qualified name of the class implementing the action.
                 - "text" (required) specifies the text (tooltip for toolbar button or text for menu item).
                 - "use-shortcut-of" (optional) specifies the ID of the action whose keyboard shortcut this action uses.
                 - "description" (optional) specifies the text displayed in the status bar when the action is focused.
                 - "icon" (optional) specifies the icon displayed on the toolbar button or next to the menu item. -->
            <action id="BpmnDiagram.AttachCamundaToDataSource"
                    class="com.valb3r.bpmn.intellij.plugin.camunda.actions.AttachCamundaBpmnDebuggerToDbAction"
                    text="Attach To Schema (Camunda)"
                    description="Attach to database schema (Camunda) for BPMN process debugging"
                    icon="/icons/icon.png">
            </action>
            <!-- The <add-to-group> node specifies that the action should be added to an existing group.
                 An action can be added to several groups.
                 - "group-id" (required) specifies the ID of the group to which the action is added. The group must be
                   implemented by an instance of the DefaultActionGroup class.
                 - "anchor" (required) specifies the position of the action in the group relative to other actions.
                   It can have the values "first", "last", "before" and "after".
                 - "relative-to-action" (required if the anchor is set to "before" and "after") specifies the action
                   before or after which the current action is inserted. -->
            <add-to-group group-id="DatabaseViewPopupMenu" anchor="last"/>
            <!-- The <separator> element defines a separator between actions. -->
            <!-- <separator/> -->
            <!-- <group id="AnotherNestedGroup"/> -->
            <!-- The <reference> element allows to add an existing action to the group.
                 - "ref" (required) specifies the ID of the action to add. -->
            <!-- <reference ref="EditorCopy"/> -->
        </group>
        <group id="BpmnCamundaDetachFromDataSource"
               text="Detach Debugger"
               description="Detach BPMN debugger from DataSource"
               icon="/icons/icon.png"
               popup="false">
            <!-- The <action> element defines an action to register.
                 - "id" (required) specifies an unique identifier for the action.
                 - "class" (required) specifies the full-qualified name of the class implementing the action.
                 - "text" (required) specifies the text (tooltip for toolbar button or text for menu item).
                 - "use-shortcut-of" (optional) specifies the ID of the action whose keyboard shortcut this action uses.
                 - "description" (optional) specifies the text displayed in the status bar when the action is focused.
                 - "icon" (optional) specifies the icon displayed on the toolbar button or next to the menu item. -->
            <action id="BpmnDiagram.BpmnDetachCamundaFromDataSource"
                    class="com.valb3r.bpmn.intellij.plugin.camunda.actions.DetachCamundaBpmnDebuggerFromDbAction"
                    text="Detach Debugger (Camunda)"
                    description="Detach BPMN debugger from DataSource (Camunda)"
                    icon="/icons/icon.png">
            </action>
            <!-- The <add-to-group> node specifies that the action should be added to an existing group.
                 An action can be added to several groups.
                 - "group-id" (required) specifies the ID of the group to which the action is added. The group must be
                   implemented by an instance of the DefaultActionGroup class.
                 - "anchor" (required) specifies the position of the action in the group relative to other actions.
                   It can have the values "first", "last", "before" and "after".
                 - "relative-to-action" (required if the anchor is set to "before" and "after") specifies the action
                   before or after which the current action is inserted. -->
            <add-to-group group-id="DatabaseViewPopupMenu" anchor="last"/>
            <!-- The <separator> element defines a separator between actions. -->
            <!-- <separator/> -->
            <!-- <group id="AnotherNestedGroup"/> -->
            <!-- The <reference> element allows to add an existing action to the group.
                 - "ref" (required) specifies the ID of the action to add. -->
            <!-- <reference ref="EditorCopy"/> -->
        </group>
    </actions>

    <!-- Extension points defined by the plugin. Extension points are registered by a plugin so that other plugins
         can provide this plugin with certain data. The "beanClass" attribute specifies the class the implementations
         of which can be used for the extension point. -->
    <!-- <extensionPoints>
        <extensionPoint name="testExtensionPoint" beanClass="com.foo.impl.MyExtensionBean"/>
    </extensionPoints>
    -->

    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform.
         The name of the tag within the <extensions> tag matches the name of the extension point,
         and the "implementation" class specifies the name of the class added to the extension point. -->
    <extensions defaultExtensionNs="com.intellij">
        <toolWindow
                id="BPMN-Camunda-Diagram"
                secondary="true"
                icon="/icons/icon.png"
                anchor="right"
                factoryClass="com.valb3r.bpmn.intellij.plugin.camunda.CamundaBpmnPluginToolWindowFactory"/>
        <!-- Project service holds a reference to the tool window, which is accessible by an action (editor menu) -->
        <projectService serviceImplementation="com.valb3r.bpmn.intellij.plugin.camunda.CamundaBpmnPluginToolWindowProjectService"/>
    </extensions>

    <!-- Inject SpEL for highlighting -->
    <extensions defaultExtensionNs="com.intellij">
        <multiHostInjector implementation="com.valb3r.bpmn.intellij.plugin.camunda.langinjection.CamundaDelegateExpressionUiInjector"/>
        <multiHostInjector implementation="com.valb3r.bpmn.intellij.plugin.camunda.langinjection.xml.CamundaXmlCamundaInjector"/>
    </extensions>

    <!-- Settings screen -->
    <extensions defaultExtensionNs="com.intellij">
        <applicationConfigurable parentId="tools" instance="com.valb3r.bpmn.intellij.plugin.core.settings.BpmnPluginSettingsConfigurable"
                                 id="com.valb3r.bpmn.intellij.plugin.core.settings.CamundaBpmnPluginSettingsConfigurable"
                                 displayName="Camunda BPMN plugin config"/>
        <applicationService serviceImplementation="com.valb3r.bpmn.intellij.plugin.camunda.settings.CamundaBpmnPluginSettingsState"/>
    </extensions>

    <!-- Pre/Post load -->
    <extensions defaultExtensionNs="com.intellij">
        <backgroundPostStartupActivity implementation="com.valb3r.bpmn.intellij.plugin.camunda.CamundaPluginPreloaded"/>
    </extensions>

    <!-- Notification balloons TODO: Not clear if it may cause any issues with 2018-2020.2 as extension is supported with 2020.3+ -->
    <extensions defaultExtensionNs="com.intellij">
        <notificationGroup id="Camunda BPMN Editor Notification group" displayType="BALLOON" key="com.valb3r.bpmn.intellij.camunda.plugin"/>
        <applicationService serviceImplementation="com.valb3r.bpmn.intellij.plugin.core.advertisement.AdvertisementState" />
    </extensions>

    <extensions defaultExtensionNs="com.intellij">
        <fileType name="Camunda BPMN 2.0 Engine XML process" implementationClass="com.valb3r.bpmn.intellij.plugin.camunda.meta.CamundaFileType"
                  fieldName="INSTANCE" language="XML" extensions="bpmn"/>
        <xml.schemaProvider implementation="com.valb3r.bpmn.intellij.plugin.camunda.schemas.CamundaBpmnFileSchemasProvider"/>
    </extensions>
    <!-- File templates registration -->
    <extensions defaultExtensionNs="com.intellij">
        <internalFileTemplate name="new-camunda-diagram.bpmn"/> <!-- Note - no .ft here -->
    </extensions>
    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform. The name of the tag
         within the <extensions> tag matches the name of the extension point, and the "implementation" class specifies
         the name of the class added to the extension point. -->
    <!-- <extensions xmlns="VssIntegration">
        <testExtensionPoint implementation="com.foo.impl.MyExtensionImpl"/>
    </extensions> -->
</idea-plugin>
